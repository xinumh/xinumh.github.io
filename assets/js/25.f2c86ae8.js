(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{517:function(v,e,t){"use strict";t.r(e);var a=t(5),_=Object(a.a)({},(function(){var v=this,e=v.$createElement,t=v._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"v-if和v-for哪个优先级高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v-if和v-for哪个优先级高"}},[v._v("#")]),v._v(" v-if和v-for哪个优先级高？")]),v._v(" "),t("p",[v._v("v-for优先于v-if被解析。")]),v._v(" "),t("p",[v._v("如果同时出现，每次渲染都会先执行循环，在进行判断，无论如何不可避免循环，浪费了性能。")]),v._v(" "),t("p",[v._v("避免这种情况，可以在嵌套template，在这一层进行v-if判断，在内部进行v-for循环。")]),v._v(" "),t("p",[v._v("vue.$options.render渲染函数：")]),v._v(" "),t("p",[v._v("同级：列表渲染函数，循环输出children，函数里边每一项会判断v-if的值看是否渲染；")]),v._v(" "),t("p",[v._v("分层：会在列表渲染函数之前进行v-if判断，然后执行v-for循环。")]),v._v(" "),t("p",[v._v("如果需要列表每一项都需要判断状态，可以在computed里面对渲染列表进行过滤。render性能优化")]),v._v(" "),t("h2",{attrs:{id:"vue组件中的data为什么是函数-vue根实例没有限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue组件中的data为什么是函数-vue根实例没有限制"}},[v._v("#")]),v._v(" Vue组件中的data为什么是函数，Vue根实例没有限制？")]),v._v(" "),t("p",[v._v("在vue多实例的时候是函数，在vue根实例没有限制。")]),v._v(" "),t("p",[v._v("vue组件可能存在多个实例，如果使用对象形式定义data，则会导致他们共用一个data对象，那么状态变更将会影响所以组件实例，这是不合理的。")]),v._v(" "),t("p",[v._v("如果以函数形式定义data，在initdata时会将其作为工厂函数返回全新的data对象，有效的规避了多个组件实例之间状态污染问题。而vue根实例创建过程中不存在该限制，因为vue根实例只有一个。")]),v._v(" "),t("h2",{attrs:{id:"vue中key的作用和工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue中key的作用和工作原理"}},[v._v("#")]),v._v(" vue中key的作用和工作原理？")]),v._v(" "),t("p",[v._v("key的作用主要是为了高校的更新虚拟dom，其原理是vue在patch的过程中，通过ke以精准的判断两个节点是否是同一个，从而避免频繁更新不同元素，使得整个patch过程更加高效，减少Dom操作量，提高性能。")]),v._v(" "),t("h2",{attrs:{id:"你怎么理解vue中diff算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#你怎么理解vue中diff算法"}},[v._v("#")]),v._v(" 你怎么理解vue中diff算法？")]),v._v(" "),t("p",[v._v("diff算法是虚拟dom技术的必然产物，通过新旧虚拟dom对比，将变化的地方更新在真实dom上。另外也需要diff高效的执行对比过程，从而降低时间复杂度为O(n)。")]),v._v(" "),t("p",[v._v("diff过程整体遵循深度优先、同层比较的策略，两个节点之间比较会根据他们是否拥有子节点或者文本节点做不同操作。比较两组子节点是算法的重点，首先假设头尾节点相同做四次比对尝试，如果没有找到相同节点，则按照通用方式遍历查找，查找结束再按情况处理剩下节点。借助key通常可以精准的找到相同节点，因此，整个patch过程（新旧虚拟dom比较的过程）非常高效。")]),v._v(" "),t("h2",{attrs:{id:"vue组件通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue组件通信"}},[v._v("#")]),v._v(" vue组件通信？")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("组件通信分为不同场景：")]),v._v(" "),t("p",[v._v("父子")]),v._v(" "),t("p",[v._v("兄弟")]),v._v(" "),t("p",[v._v("跨层级")])]),v._v(" "),t("li",[t("p",[v._v("通信方式")]),v._v(" "),t("p",[v._v("props")]),v._v(" "),t("p",[v._v("$emit/$on事件总线")]),v._v(" "),t("p",[v._v("vuex")]),v._v(" "),t("p",[v._v("$parent/$children")]),v._v(" "),t("p",[v._v("$attrs/$listeners")]),v._v(" "),t("p",[v._v("Provide/reject")])])]),v._v(" "),t("h2",{attrs:{id:"vue中watch和computed的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue中watch和computed的区别"}},[v._v("#")]),v._v(" vue中watch和computed的区别？")]),v._v(" "),t("p",[v._v("watch在数据变化时执行异步或者开销较大的操作，如搜索数据")]),v._v(" "),t("p",[v._v("computed底层来自watch，依赖项没有变化则从缓存中取值，缓存功能提升性能，更简单更高效，优先使用。一个属性受多个属性影响时使用，如购物车的结算。")]),v._v(" "),t("h2",{attrs:{id:"vue生命周期的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue生命周期的理解"}},[v._v("#")]),v._v(" vue生命周期的理解？")]),v._v(" "),t("h2",{attrs:{id:"vue响应式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue响应式"}},[v._v("#")]),v._v(" vue响应式？")]),v._v(" "),t("p",[v._v("在生成vue实例时，为对传入的data进行遍历，使用"),t("code",[v._v("Object.defineProperty")]),v._v("把这些属性转为"),t("code",[v._v("getter/setter")]),v._v(".")]),v._v(" "),t("p",[v._v("每个vue实例都有一个watcher实例，它会在实例渲染时记录这些属性，并在setter触发时重新渲染。")]),v._v(" "),t("h2",{attrs:{id:"vue双向绑定原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue双向绑定原理"}},[v._v("#")]),v._v(" vue双向绑定原理？")]),v._v(" "),t("p",[v._v("设计思想是观察者模式。")]),v._v(" "),t("p",[v._v("vue采用数据劫持结合发布者订阅模式通过Object.defineProperty()来劫持各个数据的getter、setter，在数据变动时，发布消息给订阅者，触发相应的监听回调。")])])}),[],!1,null,null,null);e.default=_.exports}}]);