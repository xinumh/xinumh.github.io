(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{514:function(t,a,e){"use strict";e.r(a);var r=e(5),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"es6新的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6新的特性"}},[t._v("#")]),t._v(" ES6新的特性")]),t._v(" "),e("p",[t._v("块级作用域、箭头函数、参数处理、解构赋值、Promise、内置对象api")]),t._v(" "),e("h2",{attrs:{id:"介绍promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍promise"}},[t._v("#")]),t._v(" 介绍Promise")]),t._v(" "),e("p",[e("code",[t._v("pending")]),t._v("（进行中）、"),e("code",[t._v("fulfilled")]),t._v("（已成功）和"),e("code",[t._v("rejected")]),t._v("（已失败）")]),t._v(" "),e("p",[t._v("该构造函数接收两个函数作为参数，分别是"),e("code",[t._v("resolve")]),t._v("和"),e("code",[t._v("reject")]),t._v("。\n当异步操作执行成功后，会将异步操作结果作为参数传入"),e("code",[t._v("resolve")]),t._v("函数并执行，此时 "),e("code",[t._v("Promise")]),t._v("对象状态从"),e("code",[t._v("pending")]),t._v("变为"),e("code",[t._v("fulfilled")]),t._v("；\n失败则会将异步操作的错误作为参数传入"),e("code",[t._v("reject")]),t._v("函数并执行，此时 "),e("code",[t._v("Promise")]),t._v("对象状态从"),e("code",[t._v("pending")]),t._v("变为"),e("code",[t._v("rejected")]),t._v("；")]),t._v(" "),e("h2",{attrs:{id:"promise有几个状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise有几个状态"}},[t._v("#")]),t._v(" Promise有几个状态")]),t._v(" "),e("h2",{attrs:{id:"说一下闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一下闭包"}},[t._v("#")]),t._v(" 说一下闭包")]),t._v(" "),e("p",[t._v("能够读取其他函数内部变量的函数；")]),t._v(" "),e("p",[t._v("优点：作用域里的 变量,在函数执行完之后依旧保持没有被垃圾回收处理掉")]),t._v(" "),e("p",[t._v("缺点：闭包会导致内存占用过高，内存没有释放")]),t._v(" "),e("h2",{attrs:{id:"react的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react的生命周期"}},[t._v("#")]),t._v(" React的生命周期")]),t._v(" "),e("p",[t._v("Constructor()")]),t._v(" "),e("p",[t._v("componentWillMount()")]),t._v(" "),e("p",[t._v("Render()")]),t._v(" "),e("p",[t._v("componentDidMount组件已经被渲染到 DOM 中后运行")]),t._v(" "),e("h2",{attrs:{id:"componentwillreceiveprops的触发条件是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#componentwillreceiveprops的触发条件是什么"}},[t._v("#")]),t._v(" componentWillReceiveProps的触发条件是什么")]),t._v(" "),e("p",[t._v("对比新旧props")]),t._v(" "),e("p",[t._v("shouldComponentUpdate()")]),t._v(" "),e("p",[t._v("是否要继续执行render方法，可以用PureComponent替代，比较state和props")]),t._v(" "),e("p",[t._v("componentDidUpdate() UI更新时调用")]),t._v(" "),e("p",[t._v("componentWillUnmount")]),t._v(" "),e("h2",{attrs:{id:"react16-3对生命周期的改变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react16-3对生命周期的改变"}},[t._v("#")]),t._v(" React16.3对生命周期的改变")]),t._v(" "),e("p",[t._v("引入了两个新的生命周期函数： "),e("code",[t._v("getDerivedStateFromProps")]),t._v("，"),e("code",[t._v("getSnapshotBeforeUpdate")])]),t._v(" "),e("h2",{attrs:{id:"介绍下react的filber架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下react的filber架构"}},[t._v("#")]),t._v(" 介绍下React的Filber架构")]),t._v(" "),e("p",[t._v("v15版本之前同步计算和对比virtrual dom，更新dom树很深的时候，页面性能就会不好；")]),t._v(" "),e("p",[t._v("破解同步操作时间过长的问题，分片。优先做紧急的事。更加紧密的处理机制，比线程还细。")]),t._v(" "),e("p",[t._v("React Fiber是对核心算法的一次重新实现")]),t._v(" "),e("p",[t._v("Reconciliation Phase1")]),t._v(" "),e("ul",[e("li",[t._v("componentWillMount")]),t._v(" "),e("li",[t._v("componentWillReceiveProps")]),t._v(" "),e("li",[t._v("shouldComponentUpdate")]),t._v(" "),e("li",[t._v("componentWillUpdate")])]),t._v(" "),e("p",[t._v("render()")]),t._v(" "),e("p",[t._v("commit Phase2")]),t._v(" "),e("ul",[e("li",[t._v("componentDidMount")]),t._v(" "),e("li",[t._v("componentDidUpdate")]),t._v(" "),e("li",[t._v("componentWillUnmount")])]),t._v(" "),e("p",[t._v("使用React Fiber之后，一定要检查一下第一阶段相关的这些生命周期函数，看看有没有逻辑是假设在一个更新过程中只调用一次。componentWillMount和componentWillUpdate重点关注。")]),t._v(" "),e("p",[t._v("从React 15 到 React 16 ，对于DOM节点的渲染实现了3个方面的优化：")]),t._v(" "),e("ul",[e("li",[t._v("React通过virtual DOM减少了实际改动真实DOM的开销")]),t._v(" "),e("li",[t._v("通过Diff算法减少了实际渲染的频次与变动范围")]),t._v(" "),e("li",[t._v("通过Fiber重构来改变这种不可控的现状，进一步提升交互体验，在用户态单线程条件下实现类似多进程的系统级别调度")])]),t._v(" "),e("p",[t._v("画Filber渲染树")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic3.zhimg.com/v2-ee3dfa5fb83befb30faae5671c14492d_r.jpg",alt:"preview"}})]),t._v(" "),e("h2",{attrs:{id:"介绍react高阶组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍react高阶组件"}},[t._v("#")]),t._v(" 介绍React高阶组件")]),t._v(" "),e("p",[t._v("React 中用于复用组件逻辑的一种高级技巧。")]),t._v(" "),e("p",[t._v("HOC 通过将组件"),e("em",[t._v("包装")]),t._v("在容器组件中来"),e("em",[t._v("组成")]),t._v("新组件。")]),t._v(" "),e("p",[t._v("常见：redux（connect）")]),t._v(" "),e("h2",{attrs:{id:"父子组件之间如何通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父子组件之间如何通信"}},[t._v("#")]),t._v(" 父子组件之间如何通信")]),t._v(" "),e("h2",{attrs:{id:"redux怎么实现属性传递-介绍下原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux怎么实现属性传递-介绍下原理"}},[t._v("#")]),t._v(" Redux怎么实现属性传递，介绍下原理")]),t._v(" "),e("h2",{attrs:{id:"react-router版本号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-router版本号"}},[t._v("#")]),t._v(" React-Router版本号")]),t._v(" "),e("h2",{attrs:{id:"网站seo怎么处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网站seo怎么处理"}},[t._v("#")]),t._v(" 网站SEO怎么处理")]),t._v(" "),e("h2",{attrs:{id:"介绍下http状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下http状态码"}},[t._v("#")]),t._v(" 介绍下HTTP状态码")]),t._v(" "),e("h2",{attrs:{id:"_403、301、302是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_403、301、302是什么"}},[t._v("#")]),t._v(" 403、301、302是什么")]),t._v(" "),e("h2",{attrs:{id:"缓存相关的http请求头"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存相关的http请求头"}},[t._v("#")]),t._v(" 缓存相关的HTTP请求头")]),t._v(" "),e("h2",{attrs:{id:"介绍https"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍https"}},[t._v("#")]),t._v(" 介绍HTTPS")]),t._v(" "),e("h2",{attrs:{id:"https怎么建立安全通道"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https怎么建立安全通道"}},[t._v("#")]),t._v(" HTTPS怎么建立安全通道")]),t._v(" "),e("h2",{attrs:{id:"前端性能优化-js原生和react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化-js原生和react"}},[t._v("#")]),t._v(" 前端性能优化（JS原生和React）")]),t._v(" "),e("h2",{attrs:{id:"用户体验做过什么优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户体验做过什么优化"}},[t._v("#")]),t._v(" 用户体验做过什么优化")]),t._v(" "),e("h2",{attrs:{id:"对pwa有什么了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对pwa有什么了解"}},[t._v("#")]),t._v(" 对PWA有什么了解")]),t._v(" "),e("h2",{attrs:{id:"对安全有什么了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对安全有什么了解"}},[t._v("#")]),t._v(" 对安全有什么了解")]),t._v(" "),e("h2",{attrs:{id:"介绍下数字签名的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下数字签名的原理"}},[t._v("#")]),t._v(" 介绍下数字签名的原理")]),t._v(" "),e("h2",{attrs:{id:"前后端通信使用什么方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前后端通信使用什么方案"}},[t._v("#")]),t._v(" 前后端通信使用什么方案")]),t._v(" "),e("h2",{attrs:{id:"restful常用的method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful常用的method"}},[t._v("#")]),t._v(" RESTful常用的Method")]),t._v(" "),e("h2",{attrs:{id:"介绍下跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下跨域"}},[t._v("#")]),t._v(" 介绍下跨域")]),t._v(" "),e("h2",{attrs:{id:"access-control-allow-origin在服务端哪里配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#access-control-allow-origin在服务端哪里配置"}},[t._v("#")]),t._v(" Access-Control-Allow-Origin在服务端哪里配置")]),t._v(" "),e("h2",{attrs:{id:"csrf跨站攻击怎么解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf跨站攻击怎么解决"}},[t._v("#")]),t._v(" csrf跨站攻击怎么解决")]),t._v(" "),e("h2",{attrs:{id:"前端和后端怎么联调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端和后端怎么联调"}},[t._v("#")]),t._v(" 前端和后端怎么联调")])])}),[],!1,null,null,null);a.default=v.exports}}]);